org: angelt
service: api-users

provider:
  name: aws
  runtime: python3.12  
  region: us-east-1
  stage: dev  # Definir el entorno como 'dev' para que los nombres de las tablas sean únicos
  memorySize: 128
  timeout: 30
  iam:
    role: arn:aws:iam::542697993719:role/LabRole
  environment:
    # Definir nombres únicos para las tablas usando el stage
    TABLE_NAME_USERS: ${sls:stage}-Pt_users  # Nombre único para la tabla de usuarios
    TABLE_NAME_TOKENS: ${sls:stage}-Pt_tokens_acceso  # Nombre único para la tabla de tokens
    SERVICE_NAME: ${sls:stage}
    

functions:
  # Función para registrar un usuario
  registerUser:
    handler: registerUser.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/register
          method: post
          cors: true
          integration: lambda

  # Función para iniciar sesión
  loginUser:
    handler: loginUser.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/login
          method: post
          cors: true
          integration: lambda    

  # Función para validar token
  ValidateToken:
    handler: ValidateToken.lambda_handler
    memorySize: 520

  # Función para cambiar la contraseña
  changePassword:
    handler: changePassword.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/change-password
          method: patch
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  # Función para obtener usuarios por país
  getUsersByCountry:
    handler: getAllByCountry.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/getallbycountry
          method: post
          cors: true
          integration: lambda

  # Función para obtener usuario por tenant_id
  getUserByTenantId:
    handler: getInfoById.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/info
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  # Función para cambiar el nombre de usuario
  changeUsername:
    handler: changeUsername.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /users/change-username
          method: patch
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }


resources:
  Resources:
    # Tabla DynamoDB para usuarios (Pt_users)
    DynamoDbTableUsers:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: country
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
        
        TableName: ${self:provider.environment.TABLE_NAME_USERS}  # Nombre de la tabla de usuarios

        # Habilitar la recuperación de punto en el tiempo (backup)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

        # Definición de un índice secundario global para 'country'
        GlobalSecondaryIndexes:
          - IndexName: CountryIndex  # Nombre del índice
            KeySchema:
              - AttributeName: country
                KeyType: HASH  # 'country' como clave HASH en el índice
            Projection:
              ProjectionType: ALL  # Incluye todos los atributos en el índice
            

        BillingMode: PAY_PER_REQUEST

    # Tabla DynamoDB para tokens (Pt_tokens_acceso)
    DynamoDbTableTokens:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE  # Sort key para los tokens
        
        TableName: ${self:provider.environment.TABLE_NAME_TOKENS}  # Nombre de la tabla de tokens

        # Habilitar la recuperación de punto en el tiempo (backup)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true


        BillingMode: PAY_PER_REQUEST

        
